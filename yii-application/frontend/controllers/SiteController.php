<?php

namespace frontend\controllers;

use common\models\Order;
use Yii;
use yii\base\InvalidParamException;
use yii\db\Query;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;
use frontend\models\PasswordResetRequestForm;
use frontend\models\ResetPasswordForm;
use frontend\models\SignupForm;
use frontend\models\ContactForm;

/**
 * Site controller
 */
class SiteController extends Controller
{
    public $layout = false;
    public $enableCsrfValidation = false;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        Yii::$app->view->params['user_id'] = Yii::$app->session->get('user_id');
    }

    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['logout', 'signup'],
                'rules' => [
                    [
                        'actions' => ['signup'],
                        'allow' => true,
                        'roles' => ['?'],
                    ],
                    [
                        'actions' => ['logout'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    /**
     * Displays homepage.
     *
     * @return mixed
     */
    public function actionIndex()
    {
        $id = Yii::$app->view->params['user_id'];
        $user = (new Query())->from('user')->where(['id' => $id])->one();
        if (empty($user)) {
            return $this->redirect('/index.php?r=member/login');
        }
        $parentUser = (new Query())->select('name')->from('user')->where(['id' => $user['p_id']])->one();
        $parentName = isset($parentUser['name']) ? $parentUser['name'] : '总裁';
        $levelCount = (new Query())->from('user')->where(['p_id' => $id])->count();
        $levelTwoCount = (new Query())->from('user')->where(['g_id' => $id])->count();
        $totalCount = $levelCount + $levelTwoCount;
        $payCount = (new Query())->from('order')->where(['user_id' => $id, 'status' => 0])->count();
        $notPayCount = (new Query())->from('order')->where(['user_id' => $id, 'status' => 1])->count();
        $link = $_SERVER['HTTP_HOST'] . '/index.php?r=site/register&id=' . $id;
        $message = (new Query())->from('message')->where(['status' => 1])->one();
        return $this->render('index', ['user' => $user, 'parentName' => $parentName, 'totalCount' => $totalCount, 'levelCount' => $levelCount, 'payCount' => $payCount, 'notPayCount' => $notPayCount, 'link' => $link,'message'=>$message]);
    }

    public function actionGoodsListView()
    {
        $id = Yii::$app->view->params['user_id'];
        $user = (new Query())->from('user')->where(['id' => $id])->one();
        $goodsList = (new Query())->from('goods')->all();
        return $this->render('goods_list', ['goodsList' => $goodsList, 'user' => $user]);
    }

    public function actionPayView()
    {
        $id = Yii::$app->request->get('id');
        $goods = (new Query())->from('goods')->where(['id' => $id])->one();
        if (empty($goods)) {
            echo '请选择商品';
            die;
        }
        return $this->render('pay', ['id' => $id, 'goods' => $goods]);
    }

    public function actionPay()
    {
        try {
            $goodsId = Yii::$app->request->post('goods_id');
            $num = Yii::$app->request->post('num');
            $userId = Yii::$app->view->params['user_id'];
            if (empty($goodsId)) {
                throw new \Exception("请选择商品购买");
            }
            if (empty($userId)) {
                throw new \Exception("请先登录");
            }
            if (empty($num)) {
                throw new \Exception("请选择数量");
            }
            $user = (new Query())->from('user')->where(['id' => $userId])->one();
            if (empty($user)) {
                throw new \Exception("非法登录");
            }
            $goods = (new Query())->from('goods')->where(['id' => $goodsId])->one();
            if (empty($goods)) {
                throw new \Exception("该商品已被删除或者下架");
            }
            $order = new Order();
            $orderData = [
                'user_id' => $userId,
                'amount' => $goods['money'] * intval($num),
                'order_sn' => Order::generateOrderNum(),
                'g_id' => $user['g_id'],
                'p_id' => $user['p_id'],
                'created_time' => time(),
                'num' => $num,
                'goods_id' => $goodsId,
            ];
            $order->setAttributes($orderData, false);
            $result = $order->save();
            if (empty($result)) {
                throw new \Exception("下单失败，请稍后再试");
            }
            $this->asJson(['success' => 1, 'code' => 200, 'msg' => '下单成功']);
        } catch (\Exception $e) {
            $this->asJson(['success' => 0, 'code' => 201, 'msg' => $e->getMessage()]);
        }
    }

    /**
     * Logs in a user.
     *
     * @return mixed
     */
    public function actionLogin()
    {
        if (!Yii::$app->user->isGuest) {
            return $this->goHome();
        }

        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post()) && $model->login()) {
            return $this->goBack();
        } else {
            $model->password = '';

            return $this->render('login', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Logs out the current user.
     *
     * @return mixed
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

    /**
     * Displays contact page.
     *
     * @return mixed
     */
    public function actionContact()
    {
        $model = new ContactForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if ($model->sendEmail(Yii::$app->params['adminEmail'])) {
                Yii::$app->session->setFlash('success', 'Thank you for contacting us. We will respond to you as soon as possible.');
            } else {
                Yii::$app->session->setFlash('error', 'There was an error sending your message.');
            }

            return $this->refresh();
        } else {
            return $this->render('contact', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Displays about page.
     *
     * @return mixed
     */
    public function actionAbout()
    {
        return $this->render('about');
    }

    /**
     * Signs user up.
     *
     * @return mixed
     */
    public function actionSignup()
    {
        $model = new SignupForm();
        if ($model->load(Yii::$app->request->post())) {
            if ($user = $model->signup()) {
                if (Yii::$app->getUser()->login($user)) {
                    return $this->goHome();
                }
            }
        }

        return $this->render('signup', [
            'model' => $model,
        ]);
    }

    /**
     * Requests password reset.
     *
     * @return mixed
     */
    public function actionRequestPasswordReset()
    {
        $model = new PasswordResetRequestForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if ($model->sendEmail()) {
                Yii::$app->session->setFlash('success', 'Check your email for further instructions.');

                return $this->goHome();
            } else {
                Yii::$app->session->setFlash('error', 'Sorry, we are unable to reset password for the provided email address.');
            }
        }

        return $this->render('requestPasswordResetToken', [
            'model' => $model,
        ]);
    }

    /**
     * Resets password.
     *
     * @param string $token
     * @return mixed
     * @throws BadRequestHttpException
     */
    public function actionResetPassword($token)
    {
        try {
            $model = new ResetPasswordForm($token);
        } catch (InvalidParamException $e) {
            throw new BadRequestHttpException($e->getMessage());
        }

        if ($model->load(Yii::$app->request->post()) && $model->validate() && $model->resetPassword()) {
            Yii::$app->session->setFlash('success', 'New password saved.');

            return $this->goHome();
        }

        return $this->render('resetPassword', [
            'model' => $model,
        ]);
    }

    public function actionUpload(){
        return $this->render('upload');
    }
}
